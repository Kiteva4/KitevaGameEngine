#include "graphic/KGEVulkan.h"

//???????? ?? ??????? ????????????? ?????????? ? ????????
bool kge::vkutility::checkInstanceExtensionsSupported(std::vector<const char*> instanceExtensionsNames)
{

    std::cout << "Vulkan: Start require  extensions" << std::endl;
    //?????? ??? ???????? ????????? ?????????? ????????
    std::vector<VkExtensionProperties> avialableExtensions;

    //?????????? ????????? ?????????? ????????
    unsigned int instanceExtensionsCount = 0;

    //???????? ?????????? ????????? ?????????? ????????
    vkEnumerateInstanceExtensionProperties(nullptr, &instanceExtensionsCount, nullptr);

    //???? ??????????? ????????? ?????????? - ?????????? false
    if (instanceExtensionsCount == 0) {
        return false;
    }

    //?????????????? ????????? ?????????? ??????????? ????????? ?????????? ?????????
    avialableExtensions.resize(instanceExtensionsCount);

    //???????? ??? ????????? ??????????
    vkEnumerateInstanceExtensionProperties(
                nullptr,
                &instanceExtensionsCount,
                avialableExtensions.data());

    //???????? ?? ????????????? ???????????
    for (auto* requiredExtName : instanceExtensionsNames)
    {
        bool found = false;

        //???????? ?? ???? ????????? ???????????
        for (auto& extProperties : avialableExtensions) {
            //???? ???????? ?????????????
            if (strcmp(requiredExtName, extProperties.extensionName) == 0) {
                found = true;
                std::cout << "Vulkan: Extension: "<<  requiredExtName << " founded "  << std::endl;
                break;
            }
        }

        //?? ??????? ????? ?? ??????????
        if (!found)
            return false;
    }

    std::cout << "Vulkan: all required extensions found successfully!" << std::endl;
    //??? ?????????? ???????
    return true;
}

//???????? ?? ??????? ????????????? ?????? ?????????
bool kge::vkutility::checkValidationLayersSupported(std::vector<const char*> instanceVLayersNames)
{

    std::cout << "Vulkan: Start require  layers" << std::endl;

    //?????? ??? ???????? ????????? ????? ?????????
    std::vector<VkLayerProperties> avialableLayers;

    //?????????? ????????? ????? ????????? ????????
    unsigned int instanceLayersCount = 0;

    //???????? ?????????? ????????? ????? ????????? ????????
    vkEnumerateInstanceLayerProperties(&instanceLayersCount, nullptr);

    //???? ??????????? ????????? ???? ????????? - ?????????? false
    if (instanceLayersCount == 0) {
        return false;
    }

    //?????????????? ????????? ????? ????????? ??????????? ????????? ?????????? ?????????
    avialableLayers.resize(instanceLayersCount);

    //???????? ??? ????????? ???? ?????????
    vkEnumerateInstanceLayerProperties(&instanceLayersCount, avialableLayers.data());

    //???????? ?? ????????????? ????? ?????????
    for (auto* requiredVLayerName : instanceVLayersNames)
    {
        bool found = false;

        //???????? ?? ???? ????????? ????? ?????????
        for (auto& vLayerProperties : avialableLayers) {
            //???? ???????? ????????????? ???? ?????????
            if (strcmp(requiredVLayerName, vLayerProperties.layerName) == 0) {
                found = true;
                std::cout << "Vulkan: Layer: "<<  requiredVLayerName << " founded "  << std::endl;
                break;
            }
        }

        //?? ?????? ????? ?? ?? ????????????? ?????
        if (!found) {
            return false;
        }
    }

    std::cout << "Vulkan: all required layers found successfully!" << std::endl;
    //??? ????????????? ???? ???????
    return true;
}

//???????, ??????? ????? ?????????? ????? ????????? ??? ??????????? ??????
VKAPI_ATTR VkBool32 VKAPI_CALL kge::vkutility::DebugVulkanCallback(
        VkDebugReportFlagsEXT flags,
        VkDebugReportObjectTypeEXT objType,
        uint64_t obj,
        size_t location,
        int32_t code,
        const char* layerPrefix,
        const char* msg,
        void* userData)
{
    std::cout << "Vulkan validation layer :" << std::endl;
    return VK_FALSE;
}
